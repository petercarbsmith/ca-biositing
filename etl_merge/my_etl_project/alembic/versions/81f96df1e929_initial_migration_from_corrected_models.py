"""Initial migration from corrected models

Revision ID: 81f96df1e929
Revises:
Create Date: 2025-09-19 20:49:23.494336

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '81f96df1e929'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('primary_product',
    sa.Column('primary_product_id', sa.Integer(), primary_key=True),
    sa.Column('primary_product_name', sa.String(), nullable=False, unique=True),
    sa.PrimaryKeyConstraint('primary_product_id')
    )
    op.create_table('taxonomy',
    sa.Column('taxonomy_id', sa.Integer(), primary_key=True),
    sa.Column('kingdom', sa.String()),
    sa.Column('phylum', sa.String()),
    sa.Column('class_', sa.String()),
    sa.Column('order', sa.String()),
    sa.Column('family', sa.String()),
    sa.Column('genus', sa.String()),
    sa.Column('species', sa.String()),
    sa.Column('variety_subspecies_cultivar', sa.String()),
    sa.PrimaryKeyConstraint('taxonomy_id')
    )
    op.create_table('biomass_type',
    sa.Column('biomass_type_id', sa.Integer(), primary_key=True),
    sa.Column('biomass_type', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('biomass_type_id')
    )
    op.create_table('biomass',
    sa.Column('biomass_id', sa.Integer(), primary_key=True),
    sa.Column('biomass_name', sa.String(), nullable=False),
    sa.Column('primary_product_id', sa.Integer()),
    sa.Column('taxonomy_id', sa.Integer()),
    sa.Column('biomass_type_id', sa.Integer()),
    sa.Column('biomass_notes', sa.String()),
    sa.PrimaryKeyConstraint('biomass_id')
    )
    op.create_table('street_addresses',
    sa.Column('street_address_id', sa.Integer(), primary_key=True),
    sa.Column('street_address', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('street_address_id')
    )
    op.create_table('cities',
    sa.Column('city_id', sa.Integer(), primary_key=True),
    sa.Column('city_name', sa.String(), nullable=False, unique=True),
    sa.PrimaryKeyConstraint('city_id')
    )
    op.create_table('zips',
    sa.Column('zip_id', sa.Integer(), primary_key=True),
    sa.Column('zip_code', sa.String(), nullable=False, unique=True),
    sa.PrimaryKeyConstraint('zip_id')
    )
    op.create_table('counties',
    sa.Column('county_id', sa.Integer(), primary_key=True),
    sa.Column('county_name', sa.String(), nullable=False, unique=True),
    sa.PrimaryKeyConstraint('county_id')
    )
    op.create_table('states',
    sa.Column('state_id', sa.Integer(), primary_key=True),
    sa.Column('state_name', sa.String(), nullable=False, unique=True),
    sa.PrimaryKeyConstraint('state_id')
    )
    op.create_table('regions',
    sa.Column('region_id', sa.Integer(), primary_key=True),
    sa.Column('region_name', sa.String(), nullable=False, unique=True),
    sa.PrimaryKeyConstraint('region_id')
    )
    op.create_table('fips',
    sa.Column('fips_id', sa.Integer(), primary_key=True),
    sa.Column('fips_description', sa.String()),
    sa.PrimaryKeyConstraint('fips_id')
    )
    op.create_table('location_resolutions',
    sa.Column('location_resolution_id', sa.Integer(), primary_key=True),
    sa.Column('resolution_type', sa.String(), nullable=False, unique=True),
    sa.PrimaryKeyConstraint('location_resolution_id')
    )
    op.create_table('geographic_locations',
    sa.Column('location_id', sa.Integer(), primary_key=True),
    sa.Column('street_address_id', sa.Integer()),
    sa.Column('city_id', sa.Integer()),
    sa.Column('zip_id', sa.Integer()),
    sa.Column('county_id', sa.Integer()),
    sa.Column('state_id', sa.Integer()),
    sa.Column('region_id', sa.Integer()),
    sa.Column('fips_id', sa.Integer()),
    sa.Column('latitude', sa.Numeric()),
    sa.Column('longitude', sa.Numeric()),
    sa.Column('location_resolution_id', sa.Integer()),
    sa.Column('is_anonymous', sa.Boolean()),
    sa.PrimaryKeyConstraint('location_id')
    )
    op.create_table('source_names',
    sa.Column('source_name_id', sa.Integer(), primary_key=True),
    sa.Column('source_name', sa.String(), nullable=False, unique=True),
    sa.PrimaryKeyConstraint('source_name_id')
    )
    op.create_table('source_types',
    sa.Column('source_type_id', sa.Integer(), primary_key=True),
    sa.Column('source_type', sa.String(), nullable=False, unique=True),
    sa.PrimaryKeyConstraint('source_type_id')
    )
    op.create_table('url',
    sa.Column('url_id', sa.Integer(), primary_key=True),
    sa.Column('url', sa.String(), unique=True),
    sa.PrimaryKeyConstraint('url_id')
    )
    op.create_table('data_sources',
    sa.Column('source_id', sa.Integer(), primary_key=True),
    sa.Column('source_name_id', sa.Integer()),
    sa.Column('source_type_id', sa.Integer()),
    sa.Column('data_resolution_id', sa.Integer()),
    sa.Column('description', sa.String()),
    sa.Column('url_id', sa.Integer()),
    sa.Column('import_timestamp', sa.DateTime()),
    sa.PrimaryKeyConstraint('source_id')
    )
    op.create_table('biomass_availability',
    sa.Column('availability_id', sa.Integer(), primary_key=True),
    sa.Column('biomass_id', sa.String(), nullable=False),
    sa.Column('location_id', sa.Integer()),
    sa.Column('primary_product_id', sa.Integer()),
    sa.Column('from_month', sa.Numeric()),
    sa.Column('to_month', sa.Numeric()),
    sa.Column('kg_low', sa.Numeric()),
    sa.Column('kg_avg', sa.Numeric()),
    sa.Column('kg_high', sa.Numeric()),
    sa.Column('bdt_low', sa.Numeric()),
    sa.Column('bdt_avg', sa.Numeric()),
    sa.Column('bdt_high', sa.Numeric()),
    sa.Column('data_source', sa.Integer()),
    sa.Column('availability_notes', sa.String()),
    sa.PrimaryKeyConstraint('availability_id')
    )
    op.create_table('biomass_price',
    sa.Column('price_id', sa.Integer(), primary_key=True),
    sa.Column('biomass_id', sa.String(), nullable=False),
    sa.Column('price_per_kg_low', sa.Numeric()),
    sa.Column('price_per_kg_avg', sa.Numeric()),
    sa.Column('price_per_kg_high', sa.Numeric()),
    sa.Column('price_data_sources', sa.Integer()),
    sa.Column('notes', sa.String()),
    sa.PrimaryKeyConstraint('price_id')
    )
    op.create_table('biomass_quality',
    sa.Column('quality_id', sa.Integer(), primary_key=True),
    sa.Column('biomass_id', sa.String(), nullable=False),
    sa.Column('expected_quality', sa.String()),
    sa.Column('output_feedstocks', sa.String()),
    sa.Column('convertibility', sa.String()),
    sa.Column('disposal_challenges', sa.String()),
    sa.Column('existing_markets', sa.String()),
    sa.Column('substitute_materials', sa.String()),
    sa.Column('regulatory_issues', sa.String()),
    sa.Column('quality_data_sources', sa.Integer()),
    sa.Column('notes', sa.String()),
    sa.PrimaryKeyConstraint('quality_id')
    )
    op.create_table('field_storage',
    sa.Column('field_storage_id', sa.Integer(), primary_key=True),
    sa.Column('storage_method', sa.String(), nullable=False, unique=True),
    sa.PrimaryKeyConstraint('field_storage_id')
    )
    op.create_table('units',
    sa.Column('unit_id', sa.Integer(), primary_key=True),
    sa.Column('unit', sa.String(), unique=True),
    sa.PrimaryKeyConstraint('unit_id')
    )
    op.create_table('collection_methods',
    sa.Column('collection_method_id', sa.Integer(), primary_key=True),
    sa.Column('collection_method_name', sa.String(), nullable=False, unique=True),
    sa.PrimaryKeyConstraint('collection_method_id')
    )
    op.create_table('harvest_methods',
    sa.Column('harvest_method_id', sa.Integer(), primary_key=True),
    sa.Column('harvest_method_name', sa.String(), nullable=False, unique=True),
    sa.PrimaryKeyConstraint('harvest_method_id')
    )
    op.create_table('affiliations',
    sa.Column('affiliation_id', sa.Integer(), primary_key=True),
    sa.Column('affiliation_name', sa.String(), nullable=False, unique=True),
    sa.PrimaryKeyConstraint('affiliation_id')
    )
    op.create_table('provider_types',
    sa.Column('provider_type_id', sa.Integer(), primary_key=True),
    sa.Column('provider_type', sa.String()),
    sa.PrimaryKeyConstraint('provider_type_id')
    )
    op.create_table('providers',
    sa.Column('provider_id', sa.Integer(), primary_key=True),
    sa.Column('provider_name', sa.String(), nullable=False, unique=True),
    sa.Column('provider_affiliation', sa.Integer()),
    sa.Column('provider_type_id', sa.Integer()),
    sa.Column('anonymous', sa.Boolean()),
    sa.PrimaryKeyConstraint('provider_id')
    )
    op.create_table('collectors',
    sa.Column('collector_id', sa.Integer(), primary_key=True),
    sa.Column('collector_name', sa.String(), nullable=False, unique=True),
    sa.Column('collector_affiliation', sa.Integer()),
    sa.PrimaryKeyConstraint('collector_id')
    )
    op.create_table('field_samples',
    sa.Column('sample_id', sa.Integer()),
    sa.Column('biomass_id', sa.String(), nullable=False),
    sa.Column('sample_name', sa.String(), nullable=False),
    sa.Column('source_codename_id', sa.Integer()),
    sa.Column('data_source_id', sa.Integer()),
    sa.Column('location_id', sa.Integer()),
    sa.Column('field_storage_id', sa.Integer()),
    sa.Column('field_storage_duration_value', sa.Numeric()),
    sa.Column('field_storage_duration_unit_id', sa.Integer()),
    sa.Column('collection_timestamp', sa.DateTime()),
    sa.Column('collection_method_id', sa.Integer()),
    sa.Column('harvest_method_id', sa.Integer()),
    sa.Column('harvest_date', sa.Date()),
    sa.Column('amount_collected_kg', sa.Numeric()),
    sa.Column('provider_id', sa.Integer()),
    sa.Column('collector_id', sa.Integer()),
    sa.Column('basic_sample_info_note', sa.String()),
    sa.Column('created_at', sa.String(), nullable=False)
    )
    op.create_table('doi',
    sa.Column('doi_id', sa.Integer(), primary_key=True),
    sa.Column('doi', sa.String()),
    sa.PrimaryKeyConstraint('doi_id')
    )
    op.create_table('references',
    sa.Column('reference_id', sa.Integer(), primary_key=True),
    sa.Column('reference_title', sa.String()),
    sa.Column('reference_author', sa.String()),
    sa.Column('reference_publication', sa.String()),
    sa.Column('reference_date', sa.Date()),
    sa.Column('reference_doi_id', sa.Integer()),
    sa.Column('url_id', sa.Integer()),
    sa.PrimaryKeyConstraint('reference_id')
    )
    op.create_table('preprocessing_methods_abbreviations',
    sa.Column('prepro_methods_abbrev_id', sa.Integer(), primary_key=True),
    sa.Column('prepro_method_abbrev', sa.String(), unique=True),
    sa.PrimaryKeyConstraint('prepro_methods_abbrev_id')
    )
    op.create_table('preprocessing_methods',
    sa.Column('prepro_method_id', sa.Integer(), primary_key=True),
    sa.Column('prepro_method', sa.String()),
    sa.Column('prepro_method_abbrev_id', sa.Integer()),
    sa.Column('prepro_temp_c', sa.Numeric()),
    sa.Column('drying_step', sa.Boolean()),
    sa.Column('method_ref_id', sa.Integer()),
    sa.PrimaryKeyConstraint('prepro_method_id')
    )
    op.create_table('buildings',
    sa.Column('building_id', sa.Integer(), primary_key=True),
    sa.Column('building_name', sa.String(), unique=True),
    sa.Column('location_id', sa.Integer()),
    sa.Column('affiliation_id', sa.Integer()),
    sa.PrimaryKeyConstraint('building_id')
    )
    op.create_table('analysts_contacts',
    sa.Column('analyst_id', sa.Integer(), primary_key=True),
    sa.Column('analyst_first_name', sa.String()),
    sa.Column('analyst_last_name', sa.String()),
    sa.Column('analyst_email', sa.String()),
    sa.Column('analyst_affiliation', sa.Integer()),
    sa.PrimaryKeyConstraint('analyst_id')
    )
    op.create_table('preprocessed_samples',
    sa.Column('prepro_material_id', sa.Integer(), primary_key=True),
    sa.Column('prepro_material_name', sa.String()),
    sa.Column('biomass_sample_id', sa.Integer()),
    sa.Column('prepro_method_id', sa.Integer()),
    sa.Column('amount_before_drying_g', sa.Numeric()),
    sa.Column('amount_after_drying', sa.Numeric()),
    sa.Column('processing_date', sa.Date()),
    sa.Column('storage_building', sa.Integer()),
    sa.Column('amount_remaining_g', sa.Numeric()),
    sa.Column('amount_as_of_date', sa.Date()),
    sa.Column('prepro_analyst_id', sa.Integer()),
    sa.Column('prepro_note', sa.String()),
    sa.PrimaryKeyConstraint('prepro_material_id')
    )
    op.create_table('analysis_types',
    sa.Column('analysis_type_id', sa.Integer(), primary_key=True),
    sa.Column('analysis_name', sa.String(), unique=True),
    sa.PrimaryKeyConstraint('analysis_type_id')
    )
    op.create_table('analysis_abbreviations',
    sa.Column('analysis_abbreviations_id', sa.Integer(), primary_key=True),
    sa.Column('analysis_abbreviation', sa.String(), unique=True),
    sa.PrimaryKeyConstraint('analysis_abbreviations_id')
    )
    op.create_table('experiments',
    sa.Column('experiment_id', sa.Integer(), primary_key=True),
    sa.Column('exper_uuid', sa.String(), unique=True),
    sa.Column('gsheet_exper_id', sa.Integer(), unique=True),
    sa.Column('analysis_type_id', sa.Integer()),
    sa.Column('analysis_abbrev_id', sa.Integer()),
    sa.Column('exper_start_date', sa.Date()),
    sa.Column('exper_duration', sa.Numeric()),
    sa.Column('exper_duration_unit_id', sa.Integer()),
    sa.Column('exper_location_id', sa.Integer()),
    sa.Column('exper_description', sa.String()),
    sa.PrimaryKeyConstraint('experiment_id')
    )
    op.create_table('parameter_catagories',
    sa.Column('parameter_catagory_id', sa.Integer(), primary_key=True),
    sa.Column('parameter_catagory', sa.String()),
    sa.PrimaryKeyConstraint('parameter_catagory_id')
    )
    op.create_table('parameters',
    sa.Column('parameter_id', sa.Integer(), primary_key=True),
    sa.Column('parameter_name', sa.String(), unique=True),
    sa.Column('parameter_category_id', sa.Integer()),
    sa.Column('standard_unit_id', sa.Integer()),
    sa.Column('calculated', sa.Boolean()),
    sa.Column('description', sa.String()),
    sa.Column('typical_range_min', sa.Numeric()),
    sa.Column('typical_range_max', sa.Numeric()),
    sa.PrimaryKeyConstraint('parameter_id')
    )
    op.create_table('qc_results',
    sa.Column('qc_result_id', sa.Integer(), primary_key=True),
    sa.Column('qc_result', sa.String(), unique=True),
    sa.PrimaryKeyConstraint('qc_result_id')
    )
    op.create_table('rooms',
    sa.Column('room_id', sa.Integer(), primary_key=True),
    sa.Column('room_number', sa.String(), unique=True),
    sa.Column('building_id', sa.Integer()),
    sa.PrimaryKeyConstraint('room_id')
    )
    op.create_table('equipment',
    sa.Column('equipment_id', sa.Integer(), primary_key=True),
    sa.Column('equipment_name', sa.String(), nullable=False, unique=True),
    sa.Column('equipment_room_id', sa.Integer()),
    sa.Column('description', sa.String()),
    sa.PrimaryKeyConstraint('equipment_id')
    )
    op.create_table('analysis_results',
    sa.Column('result_id', sa.Integer(), primary_key=True),
    sa.Column('anlaysis_sample', sa.Integer()),
    sa.Column('experiment_id', sa.Integer()),
    sa.Column('analysis_type_id', sa.Integer()),
    sa.Column('replicate_no', sa.Integer()),
    sa.Column('analysis_timestamp', sa.DateTime()),
    sa.Column('parameter_id', sa.Integer()),
    sa.Column('value', sa.Numeric()),
    sa.Column('unit_id', sa.Integer()),
    sa.Column('qc_result_id', sa.Integer()),
    sa.Column('measurement_equipment_id', sa.Integer()),
    sa.Column('raw_data_url_id', sa.Integer()),
    sa.Column('analyst_id', sa.Integer()),
    sa.Column('analysis_note', sa.String()),
    sa.PrimaryKeyConstraint('result_id')
    )
    op.create_table('method_abbrevs',
    sa.Column('method_abbrev_id', sa.Integer(), primary_key=True),
    sa.Column('method_abbrev', sa.String(), nullable=False, unique=True),
    sa.PrimaryKeyConstraint('method_abbrev_id')
    )
    op.create_table('method_categories',
    sa.Column('method_category_id', sa.Integer(), primary_key=True),
    sa.Column('method_category', sa.String(), nullable=False, unique=True),
    sa.PrimaryKeyConstraint('method_category_id')
    )
    op.create_table('method_standards',
    sa.Column('method_standard_id', sa.Integer(), primary_key=True),
    sa.Column('method_standard', sa.String(), nullable=False, unique=True),
    sa.PrimaryKeyConstraint('method_standard_id')
    )
    op.create_table('methods',
    sa.Column('method_id', sa.Integer(), primary_key=True),
    sa.Column('method_name', sa.String(), unique=True),
    sa.Column('method_abbrev_id', sa.Integer()),
    sa.Column('method_category_id', sa.Integer()),
    sa.Column('method_standard_id', sa.Integer()),
    sa.Column('description', sa.String()),
    sa.Column('detection_limits', sa.String()),
    sa.Column('procedure_reference_id', sa.Integer()),
    sa.Column('method_url_id', sa.Integer()),
    sa.PrimaryKeyConstraint('method_id')
    )
    op.create_table('experiment_methods',
    sa.Column('experiment_method_id', sa.Integer(), primary_key=True),
    sa.Column('experiment_id', sa.Integer()),
    sa.Column('method_id', sa.Integer()),
    sa.PrimaryKeyConstraint('experiment_method_id')
    )
    op.create_table('method_equipment',
    sa.Column('method_equipment_id', sa.Integer(), primary_key=True),
    sa.Column('method_id', sa.Integer()),
    sa.Column('equipment_id', sa.Integer()),
    sa.PrimaryKeyConstraint('method_equipment_id')
    )
    op.create_table('parameter_methods',
    sa.Column('param_method_id', sa.Integer(), primary_key=True),
    sa.Column('parameter_id', sa.Integer()),
    sa.Column('method_id', sa.Integer()),
    sa.PrimaryKeyConstraint('param_method_id')
    )
    op.create_table('parameter_units',
    sa.Column('parameter_unit_id', sa.Integer(), primary_key=True),
    sa.Column('parameter_id', sa.Integer()),
    sa.Column('unit_id', sa.Integer()),
    sa.PrimaryKeyConstraint('parameter_unit_id')
    )
    op.create_table('external_atip',
    sa.Column('atip_ID', sa.Integer(), primary_key=True),
    sa.Column('biomass_id', sa.Integer()),
    sa.Column('location_id', sa.Integer()),
    sa.Column('parameter_id', sa.Integer()),
    sa.Column('value', sa.Numeric()),
    sa.Column('unit_id', sa.Integer()),
    sa.Column('geometry_id', sa.Integer()),
    sa.Column('geometry', sa.String()),
    sa.Column('import_date', sa.Date()),
    sa.PrimaryKeyConstraint('atip_ID')
    )
    op.create_table('external_dairy_one',
    sa.Column('dairy_one_id', sa.Integer(), primary_key=True),
    sa.Column('data_source_id', sa.Integer()),
    sa.Column('biomass_id', sa.Integer()),
    sa.Column('analysis_type_id', sa.Integer()),
    sa.Column('parameter_id', sa.Integer()),
    sa.Column('parameter_method_id', sa.Integer()),
    sa.Column('samples_count', sa.Integer()),
    sa.Column('mean_value', sa.Numeric()),
    sa.Column('std_dev', sa.Numeric()),
    sa.Column('min_value', sa.Numeric()),
    sa.Column('max_value', sa.Numeric()),
    sa.Column('unit_id', sa.Integer()),
    sa.Column('methodology_reference_id', sa.Integer()),
    sa.Column('accumulated_years_from', sa.Date()),
    sa.Column('accumulated_years_to', sa.Date()),
    sa.Column('import_date', sa.Date()),
    sa.PrimaryKeyConstraint('dairy_one_id')
    )
    op.create_table('external_ebmud',
    sa.Column('ebmud_id', sa.Integer(), primary_key=True),
    sa.Column('data_source_id', sa.Integer()),
    sa.Column('biomass_id', sa.Integer()),
    sa.Column('analysis_type_id', sa.Integer()),
    sa.Column('parameter_id', sa.Integer()),
    sa.Column('parameter_method_id', sa.Integer()),
    sa.Column('mean_value', sa.Numeric()),
    sa.Column('std_dev', sa.Numeric()),
    sa.Column('min_value', sa.Numeric()),
    sa.Column('max_value', sa.Numeric()),
    sa.Column('sample_count', sa.Integer()),
    sa.Column('unit_id', sa.Integer()),
    sa.Column('import_date', sa.Date()),
    sa.PrimaryKeyConstraint('ebmud_id')
    )
    op.create_table('external_inl_biofeedstock_library',
    sa.Column('bfl_id', sa.Integer(), primary_key=True),
    sa.Column('data_source_id', sa.Integer()),
    sa.Column('sample_id', sa.Integer()),
    sa.Column('biomass_id', sa.Integer()),
    sa.Column('analysis_type_id', sa.Integer()),
    sa.Column('state_id', sa.Integer()),
    sa.Column('affiliations_id', sa.Integer()),
    sa.Column('harvest_method_id', sa.Integer()),
    sa.Column('collection_method_id', sa.Integer()),
    sa.Column('parameter_id', sa.Integer()),
    sa.Column('parameter_method_id', sa.Integer()),
    sa.Column('mean_value', sa.Numeric()),
    sa.Column('std_dev', sa.Numeric()),
    sa.Column('min_value', sa.Numeric()),
    sa.Column('max_value', sa.Numeric()),
    sa.Column('sample_count', sa.Integer()),
    sa.Column('unit_id', sa.Integer()),
    sa.Column('methodology_reference_id', sa.Integer()),
    sa.Column('accumulated_years_from', sa.Date()),
    sa.Column('accumulated_years_to', sa.Date()),
    sa.Column('import_date', sa.Date()),
    sa.PrimaryKeyConstraint('bfl_id')
    )
    op.create_table('external_land_id',
    sa.Column('land_id', sa.Integer(), primary_key=True),
    sa.Column('biomass_id', sa.Integer()),
    sa.Column('location_id', sa.Integer()),
    sa.Column('parameter_id', sa.Integer()),
    sa.Column('value', sa.Numeric()),
    sa.Column('unit_id', sa.Integer()),
    sa.Column('geometry_id', sa.Integer()),
    sa.Column('geometry', sa.String()),
    sa.Column('import_date', sa.Date()),
    sa.PrimaryKeyConstraint('land_id')
    )
    op.create_table('external_phyllis2',
    sa.Column('phyllis_id', sa.Integer(), primary_key=True),
    sa.Column('data_source_id', sa.Integer()),
    sa.Column('biomass_id', sa.Integer()),
    sa.Column('analysis_type_id', sa.Integer()),
    sa.Column('parameter_id', sa.Integer()),
    sa.Column('parameter_method_id', sa.Integer()),
    sa.Column('mean_value', sa.Numeric()),
    sa.Column('std_dev', sa.Numeric()),
    sa.Column('max_value', sa.Numeric()),
    sa.Column('sample_count', sa.Integer()),
    sa.Column('unit_id', sa.Integer()),
    sa.Column('methodology_reference_id', sa.Integer()),
    sa.Column('import_date', sa.Date()),
    sa.PrimaryKeyConstraint('phyllis_id')
    )
    op.create_table('external_usda',
    sa.Column('usda_id', sa.Integer(), primary_key=True),
    sa.Column('biomass_id', sa.Integer()),
    sa.Column('location_id', sa.Integer()),
    sa.Column('parameter_id', sa.Integer()),
    sa.Column('value', sa.Numeric()),
    sa.Column('unit_id', sa.Integer()),
    sa.Column('geometry_id', sa.Integer()),
    sa.Column('geometry', sa.String()),
    sa.Column('import_date', sa.Date()),
    sa.PrimaryKeyConstraint('usda_id')
    )
    op.create_table('raster_metadata',
    sa.Column('id', sa.Integer(), primary_key=True),
    sa.Column('source', sa.String()),
    sa.Column('resolution', sa.Float()),
    sa.Column('srid', sa.Integer()),
    sa.Column('acquisition_date', sa.Date()),
    sa.Column('notes', sa.String()),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('vectorized_raster_polygons',
    sa.Column('vectorized_ID', sa.Integer(), primary_key=True),
    sa.Column('geometry', sa.String()),
    sa.Column('raster_id', sa.Integer()),
    sa.Column('class_', sa.String()),
    sa.Column('value', sa.Float()),
    sa.Column('mean_value', sa.Float()),
    sa.Column('std_dev', sa.Float()),
    sa.Column('area_m2', sa.Float()),
    sa.Column('date_acquired', sa.Date()),
    sa.Column('source', sa.String()),
    sa.Column('notes', sa.String()),
    sa.PrimaryKeyConstraint('vectorized_ID')
    )
    op.create_table('ag_treatments',
    sa.Column('ag_treatment_id', sa.Integer(), primary_key=True),
    sa.Column('ag_treatment_name', sa.String()),
    sa.PrimaryKeyConstraint('ag_treatment_id')
    )
    op.create_table('soil_type',
    sa.Column('soil_type_id', sa.Integer(), primary_key=True),
    sa.Column('soil_type', sa.String(), unique=True),
    sa.Column('soil_location', sa.Integer()),
    sa.PrimaryKeyConstraint('soil_type_id')
    )
    op.create_table('metadata',
    sa.Column('metadata_id', sa.Integer(), primary_key=True),
    sa.Column('sample_id', sa.Integer()),
    sa.Column('ag_treatment_id', sa.Integer()),
    sa.Column('last_application_date', sa.Date()),
    sa.Column('treatment_amount_per_acre', sa.Numeric()),
    sa.Column('soil_type', sa.Integer()),
    sa.PrimaryKeyConstraint('metadata_id')
    )
    op.create_table('particle_size',
    sa.Column('particle_size_id', sa.Integer(), primary_key=True),
    sa.Column('sample_id', sa.Integer()),
    sa.Column('particle_length', sa.Integer()),
    sa.Column('particle_width', sa.Integer()),
    sa.Column('particle_height', sa.Integer()),
    sa.Column('particle_units', sa.Integer()),
    sa.PrimaryKeyConstraint('particle_size_id')
    )
    op.create_table('analysis_replicate_id',
    sa.Column('analysis_replicate_id', sa.Integer(), primary_key=True),
    sa.Column('result_id', sa.Integer()),
    sa.Column('analysis_types_id', sa.Integer()),
    sa.Column('analysis_replicate_uuid', sa.String()),
    sa.PrimaryKeyConstraint('analysis_replicate_id')
    )
    op.create_table('product_type',
    sa.Column('product_type_id', sa.Integer(), primary_key=True),
    sa.Column('product', sa.String()),
    sa.PrimaryKeyConstraint('product_type_id')
    )
    op.create_table('autoclave_profile',
    sa.Column('autoclave_id', sa.Integer(), primary_key=True),
    sa.Column('result_id', sa.Integer()),
    sa.Column('product_type_id', sa.Integer()),
    sa.Column('product_value', sa.Numeric()),
    sa.Column('product_unit_id', sa.Integer()),
    sa.PrimaryKeyConstraint('autoclave_id')
    )
    op.create_table('compositional_analysis',
    sa.Column('cmp_id', sa.Integer(), primary_key=True),
    sa.Column('result_id', sa.Integer()),
    sa.Column('parameter_id', sa.Integer()),
    sa.Column('value', sa.Numeric()),
    sa.Column('unit_id', sa.Integer()),
    sa.Column('calculated_parameter_id', sa.Integer()),
    sa.Column('calculated_parameter_value', sa.Numeric()),
    sa.Column('calculated_parameter_unit_id', sa.Integer()),
    sa.Column('notes', sa.String()),
    sa.PrimaryKeyConstraint('cmp_id')
    )
    op.create_table('organisms',
    sa.Column('organism_id', sa.Integer(), primary_key=True),
    sa.Column('organism_name', sa.String()),
    sa.Column('organism_strain_id', sa.Integer()),
    sa.Column('notes', sa.String()),
    sa.PrimaryKeyConstraint('organism_id')
    )
    op.create_table('fermentation_profile',
    sa.Column('fp_id', sa.Integer(), primary_key=True),
    sa.Column('result_id', sa.Integer()),
    sa.Column('parameter_id', sa.Integer()),
    sa.Column('value', sa.Numeric()),
    sa.Column('unit_id', sa.Integer()),
    sa.Column('organism_id', sa.Integer()),
    sa.Column('product_type_id', sa.Integer()),
    sa.Column('product_value', sa.Numeric()),
    sa.Column('product_unit_id', sa.Integer()),
    sa.Column('notes', sa.String()),
    sa.PrimaryKeyConstraint('fp_id')
    )
    op.create_table('gasification_profile',
    sa.Column('gasification_id', sa.Integer(), primary_key=True),
    sa.Column('result_id', sa.Integer()),
    sa.Column('parameter_id', sa.Integer()),
    sa.Column('value', sa.Numeric()),
    sa.Column('unit_id', sa.Integer()),
    sa.Column('notes', sa.String()),
    sa.Column('product_type_id', sa.Integer()),
    sa.Column('product_value', sa.Numeric()),
    sa.Column('product_unit_id', sa.Integer()),
    sa.PrimaryKeyConstraint('gasification_id')
    )
    op.create_table('icp_analysis',
    sa.Column('icp_id', sa.Integer(), primary_key=True),
    sa.Column('result_id', sa.Integer()),
    sa.Column('parameter_id', sa.Integer()),
    sa.Column('value', sa.Numeric()),
    sa.Column('unit_id', sa.Integer()),
    sa.Column('concentration_calculation_url_id', sa.Integer()),
    sa.Column('result_wavelength', sa.Numeric()),
    sa.Column('raw_url', sa.String()),
    sa.Column('notes', sa.String()),
    sa.PrimaryKeyConstraint('icp_id')
    )
    op.create_table('proximate_analysis',
    sa.Column('prox_id', sa.Integer(), primary_key=True),
    sa.Column('result_id', sa.Integer()),
    sa.Column('parameter_id', sa.Integer()),
    sa.Column('value', sa.Numeric()),
    sa.Column('unit_id', sa.Integer()),
    sa.Column('notes', sa.String()),
    sa.PrimaryKeyConstraint('prox_id')
    )
    op.create_table('xrf_analysis',
    sa.Column('xrf_id', sa.Integer(), primary_key=True),
    sa.Column('result_id', sa.Integer()),
    sa.Column('parameter_id', sa.Integer()),
    sa.Column('value', sa.Numeric()),
    sa.Column('unit_id', sa.Integer()),
    sa.Column('notes', sa.String()),
    sa.PrimaryKeyConstraint('xrf_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('xrf_analysis')
    op.drop_table('proximate_analysis')
    op.drop_table('icp_analysis')
    op.drop_table('gasification_profile')
    op.drop_table('fermentation_profile')
    op.drop_table('organisms')
    op.drop_table('compositional_analysis')
    op.drop_table('autoclave_profile')
    op.drop_table('product_type')
    op.drop_table('analysis_replicate_id')
    op.drop_table('particle_size')
    op.drop_table('metadata')
    op.drop_table('soil_type')
    op.drop_table('ag_treatments')
    op.drop_table('vectorized_raster_polygons')
    op.drop_table('raster_metadata')
    op.drop_table('external_usda')
    op.drop_table('external_phyllis2')
    op.drop_table('external_land_id')
    op.drop_table('external_inl_biofeedstock_library')
    op.drop_table('external_ebmud')
    op.drop_table('external_dairy_one')
    op.drop_table('external_atip')
    op.drop_table('parameter_units')
    op.drop_table('parameter_methods')
    op.drop_table('method_equipment')
    op.drop_table('experiment_methods')
    op.drop_table('methods')
    op.drop_table('method_standards')
    op.drop_table('method_categories')
    op.drop_table('method_abbrevs')
    op.drop_table('analysis_results')
    op.drop_table('equipment')
    op.drop_table('rooms')
    op.drop_table('qc_results')
    op.drop_table('parameters')
    op.drop_table('parameter_catagories')
    op.drop_table('experiments')
    op.drop_table('analysis_abbreviations')
    op.drop_table('analysis_types')
    op.drop_table('preprocessed_samples')
    op.drop_table('analysts_contacts')
    op.drop_table('buildings')
    op.drop_table('preprocessing_methods')
    op.drop_table('preprocessing_methods_abbreviations')
    op.drop_table('references')
    op.drop_table('doi')
    op.drop_table('field_samples')
    op.drop_table('collectors')
    op.drop_table('providers')
    op.drop_table('provider_types')
    op.drop_table('affiliations')
    op.drop_table('harvest_methods')
    op.drop_table('collection_methods')
    op.drop_table('units')
    op.drop_table('field_storage')
    op.drop_table('biomass_quality')
    op.drop_table('biomass_price')
    op.drop_table('biomass_availability')
    op.drop_table('data_sources')
    op.drop_table('url')
    op.drop_table('source_types')
    op.drop_table('source_names')
    op.drop_table('geographic_locations')
    op.drop_table('location_resolutions')
    op.drop_table('fips')
    op.drop_table('regions')
    op.drop_table('states')
    op.drop_table('counties')
    op.drop_table('zips')
    op.drop_table('cities')
    op.drop_table('street_addresses')
    op.drop_table('biomass')
    op.drop_table('biomass_type')
    op.drop_table('taxonomy')
    op.drop_table('primary_product')
    # ### end Alembic commands ###
